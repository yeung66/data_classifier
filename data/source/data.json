[
    {
        "bug_id" : "10067",
		"creation_ts" : "2011-06-02 11:40:59 -0700",
		"short_desc" : "clang miscompiles MipsISelLowering.cpp on i386-linux.",
		"delta_ts" : "2011-06-02 16:25:33 -0700",
		"classification" : "Unclassified",
        "product" : "libraries",
        "long_desc" : "See http://google1.osuosl.org:8011/builders/clang-i686-linux-selfhost-rel/builds/18\n\nAttached is a standalone c++ test case that shows the problem. It's not visible on darwin or x86_64-linux though.\n\n$  clang++ v.cc && ./a.out\nDEADBEEF\n$ clang++ -O1 v.cc && ./a.out\n0",
        "comment" : "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCreated attachment 6679\nReduced c++ testcase\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCreated attachment 6680\nbugpoint-reduced testcase for darwin\n\nThis testcase shows the problem on i386-darwin:\n\n$ opt bugpoint-reduced-simplified.bc |llc -mtriple=i386-apple-darwin10 >bugpoint-reduced-simplified.o -filetype=obj && clang++ bugpoint-reduced-simplified.o -m32 && ./a.out\nDEADBEEF\n$ opt bugpoint-reduced-simplified.bc -basicaa -inline -functionattrs -instcombine -gvn -memcpyopt |llc -mtriple=i386-apple-darwin10 >bugpoint-reduced-simplified.o -filetype=obj && clang++ bugpoint-reduced-simplified.o -m32 && ./a.out\n0\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCreated attachment 6681\nbugpoint-reduced testcase for i386-linux\n\nSame testcase, but this version only links on linux.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCreated attachment 6683\nhand-reduced bitcode\n\nThis testcase prints \"DEADBEEF\" without optimization and \"0\" with \"opt -basicaa -memcpyopt\".\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nr132485."
    },
    {
        "bug_id" : "10217",
		"creation_ts" : "2011-06-28 05:15:31 -0700",
		"short_desc" : "Confusing error message with deleted implicit copy constructors/assignment operators",
		"delta_ts" : "2012-04-02 16:08:18 -0700",
		"classification" : "Unclassified",
        "product" : "clang",
        "long_desc" : "Consider the following code (adapted from libc++):\n\ntemplate <class _T1, class _T2>\nstruct __compressed_pair\n{\n    __compressed_pair() {}\n    __compressed_pair(__compressed_pair&&) {}\n};\n\ntypedef __compressed_pair<int, int>\tP;\n\nP foo();\n\nint main(int, char**)\n{\n\tP s;\n\ts = foo();\n}\n\n\nCompiling this with clang r133996 results in:\n\n$ clang -std=c++0x clang.cpp\nclang.cpp:15:4: error: overload resolution selected deleted operator '='\n        s = foo();\n        ~ ^ ~~~~~\nclang.cpp:2:8: note: candidate function (the implicit copy assignment operator) has been explicitly\n      deleted\nstruct __compressed_pair\n       ^\n1 error generated.\n\n\nThis behaviour is correct as per 12.8p18, however the error message is quite confusing: How can an *implicit* operator be *explicitely* deleted? I think the note should end with \"... by the explicit move {constructor|assignment operator}\". Also, it should point to this move constructor/operator instead of to the beginning of the class definition.",
        "comment" : "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*** Bug 11101 has been marked as a duplicate of this bug. ***\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWork under way to fix.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*** Bug 10811 has been marked as a duplicate of this bug. ***\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis diagnostic is also inscrutable in other cases:\n\n/usr/include/boost/python/object_slices.hpp:92:12: error: call to deleted constructor of 'object_slice' (aka 'proxy<boost::python::api::slice_policies>')\n    return object_slice(x, api::slice_key(borrowed(start.ptr()), allow_null((PyObject*)0)));\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/boost/python/object_core.hpp:64:35: note: function has been explicitly marked deleted here\n  template <class Policies> class proxy;\n                                  ^\nEh?\n\n1) Don't point to a forward declaration\n2) It really wasn't *explicitly* deleted.\n3) Please\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*** Bug 10315 has been marked as a duplicate of this bug. ***\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFixed in r153773, for most cases of implicitly-deleted special members. The issue in comment#0 is resolved by DR1402, which I'm implementing next...\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRemaining issues fixed in r153894. Testcase in comment#0 now produces:\n\ntestcase.cpp:15:7: error: overload resolution selected implicitly-deleted copy assignment operator\n    s = foo();\n      ^\ntestcase.cpp:5:5: note: copy constructor is implicitly deleted because '__compressed_pair<int, int>' has a user-declared move constructor\n    __compressed_pair(__compressed_pair&&) {}\n    ^\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAnd r153897 fixes that diagnostic to say 'copy assignment operator' not 'copy constructor' :)"
    },
    {
        "bug_id" : "10325",
		"creation_ts" : "2011-07-10 16:47:18 -0700",
		"short_desc" : "clang++ craches when compiling certain code",
		"delta_ts" : "2011-07-12 06:50:04 -0700",
		"classification" : "Unclassified",
        "product" : "clang",
        "long_desc" : "Created attachment 6868\nucFiber.cpp\n\nthe attached code was compiled with libc++\nclang++ -c ucFiber.cpp -std=c++0x -U__STRICT_ANSI__ -stdlib=libc++\n\nIt used to compile an run with previous revisions.\nThe revision that resulted in this error must be between Jul 5 and Jul 10.\n\n\nclang++ -c ucFiber.cpp -std=c++0x -U__STRICT_ANSI__ -stdlib=libc++\nAssertion failed: ((i >= FTy->getNumParams() || FTy->getParamType(i) == Params[i]->getType()) && \"Calling a function with a bad signature!\"), function init, file Instructions.cpp, line 191.\n0  clang             0x00000001018f4602 PrintStackTrace(void*) + 34\n1  clang             0x00000001018f5583 SignalHandler(int) + 707\n2  libSystem.B.dylib 0x00007fff877951ba _sigtramp + 26\n3  libSystem.B.dylib 0x00007fff5fbf99a0 _sigtramp + 3628484608\n4  clang             0x00000001018f4a82 __assert_rtn + 66\n5  clang             0x0000000101803a64 llvm::CallInst::init(llvm::Value*, llvm::Value* const*, unsigned int) + 292\n6  clang             0x0000000101652c84 llvm::CallInst::CallInst<llvm::Value**>(llvm::Value*, llvm::Value**, llvm::Value**, llvm::Twine const&, llvm::Instruction*) + 164\n7  clang             0x00000001001ae366 clang::CodeGen::CodeGenFunction::EmitCall(clang::CodeGen::CGFunctionInfo const&, llvm::Value*, clang::CodeGen::ReturnValueSlot, clang::CodeGen::CallArgList const&, clang::Decl const*, llvm::Instruction**) + 5286\n8  clang             0x00000001001f04e7 clang::CodeGen::CodeGenFunction::EmitCall(clang::QualType, llvm::Value*, clang::CodeGen::ReturnValueSlot, clang::ConstExprIterator, clang::ConstExprIterator, clang::Decl const*) + 519\n9  clang             0x00000001001fb8cb clang::CodeGen::CodeGenFunction::EmitCallExpr(clang::CallExpr const*, clang::CodeGen::ReturnValueSlot) + 1003\n10 clang             0x0000000100226582 (anonymous namespace)::ScalarExprEmitter::VisitCallExpr(clang::CallExpr const*) + 82\n11 clang             0x00000001002311eb clang::StmtVisitorBase<clang::make_ptr, (anonymous namespace)::ScalarExprEmitter, llvm::Value*>::Visit(clang::Stmt*) + 3947\n12 clang             0x000000010023227d clang::CodeGen::CodeGenFunction::EmitScalarExpr(clang::Expr const*, bool) + 141\n13 clang             0x00000001001f27e0 clang::CodeGen::CodeGenFunction::EmitAnyExpr(clang::Expr const*, clang::CodeGen::AggValueSlot, bool) + 80\n14 clang             0x00000001002001b5 clang::CodeGen::CodeGenFunction::EmitIgnoredExpr(clang::Expr const*) + 53\n15 clang             0x00000001002a48fc clang::CodeGen::CodeGenFunction::EmitStmt(clang::Stmt const*) + 1356\n16 clang             0x00000001002a78bb clang::CodeGen::CodeGenFunction::EmitCompoundStmt(clang::CompoundStmt const&, bool, clang::CodeGen::AggValueSlot) + 283\n17 clang             0x00000001002a7c89 clang::CodeGen::CodeGenFunction::EmitSimpleStmt(clang::Stmt const*) + 505\n18 clang             0x00000001002a43e0 clang::CodeGen::CodeGenFunction::EmitStmt(clang::Stmt const*) + 48\n19 clang             0x00000001002a75c1 clang::CodeGen::CodeGenFunction::EmitIfStmt(clang::IfStmt const&) + 529\n20 clang             0x00000001002a47dd clang::CodeGen::CodeGenFunction::EmitStmt(clang::Stmt const*) + 1069\n21 clang             0x00000001002a78bb clang::CodeGen::CodeGenFunction::EmitCompoundStmt(clang::CompoundStmt const&, bool, clang::CodeGen::AggValueSlot) + 283\n22 clang             0x00000001002a7c89 clang::CodeGen::CodeGenFunction::EmitSimpleStmt(clang::Stmt const*) + 505\n23 clang             0x00000001002a43e0 clang::CodeGen::CodeGenFunction::EmitStmt(clang::Stmt const*) + 48\n24 clang             0x00000001001bbbb2 clang::CodeGen::CodeGenFunction::EmitConstructorBody(clang::CodeGen::FunctionArgList&) + 210\n25 clang             0x00000001002d09b6 clang::CodeGen::CodeGenFunction::GenerateCode(clang::GlobalDecl, llvm::Function*, clang::CodeGen::CGFunctionInfo const&) + 646\n26 clang             0x00000001001a16ee clang::CodeGen::CodeGenModule::EmitCXXConstructor(clang::CXXConstructorDecl const*, clang::CXXCtorType) + 270\n27 clang             0x00000001002dbe2f clang::CodeGen::CodeGenModule::EmitGlobalDefinition(clang::GlobalDecl) + 287\n28 clang             0x00000001002dc00a clang::CodeGen::CodeGenModule::EmitGlobal(clang::GlobalDecl) + 154\n29 clang             0x00000001002dd029 clang::CodeGen::CodeGenModule::EmitTopLevelDecl(clang::Decl*) + 1129\n30 clang             0x00000001002dce9b clang::CodeGen::CodeGenModule::EmitTopLevelDecl(clang::Decl*) + 731\n31 clang             0x00000001002dce9b clang::CodeGen::CodeGenModule::EmitTopLevelDecl(clang::Decl*) + 731\n32 clang             0x00000001002ef80f (anonymous namespace)::CodeGeneratorImpl::HandleTopLevelDecl(clang::DeclGroupRef) + 63\n33 clang             0x00000001002cbefb clang::BackendConsumer::HandleTopLevelDecl(clang::DeclGroupRef) + 155\n34 clang             0x00000001002fd4a2 clang::ParseAST(clang::Sema&, bool) + 338\n35 clang             0x00000001002ca3dc clang::CodeGenAction::ExecuteAction() + 60\n36 clang             0x000000010002bd01 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 433\n37 clang             0x000000010000ac4b clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 1547\n38 clang             0x000000010000154c cc1_main(char const**, char const**, char const*, void*) + 652\n39 clang             0x0000000100009a6e main + 4526\n40 clang             0x0000000100000934 start + 52\n41 clang             0x000000000000002b start + 4294965035\nStack dump:\n0.\tProgram arguments: /Users/niebuhr/projects/llvm/Release+Asserts/bin/clang -cc1 -triple x86_64-apple-macosx10.6.8 -emit-obj -mrelax-all -disable-free -main-file-name ucFiber.cpp -pic-level 1 -mdisable-fp-elim -masm-verbose -munwind-tables -target-cpu core2 -target-linker-version 123.2 -coverage-file ucFiber.o -resource-dir /Users/niebuhr/projects/llvm/Release+Asserts/bin/../lib/clang/3.0 -U __STRICT_ANSI__ -stdlib=libc++ -std=c++0x -fdeprecated-macro -ferror-limit 19 -fmessage-length 151 -stack-protector 1 -fblocks -fcxx-exceptions -fexceptions -fdiagnostics-show-option -fcolor-diagnostics -o ucFiber.o -x c++ ucFiber.cpp \n1.\t<eof> parser at end of file\n2.\t../odemx-http.git/src/coroutine/ucFiber.cpp:34:11: LLVM IR generation of declaration 'odemx'\n3.\t../odemx-http.git/src/coroutine/ucFiber.cpp:48:10: Generating code for declaration 'odemx::coroutine::ucFiber::ucFiber'\n4.\t../odemx-http.git/src/coroutine/ucFiber.cpp:52:1: LLVM IR generation of compound statement ('{}')\n5.\t../odemx-http.git/src/coroutine/ucFiber.cpp:61:27: LLVM IR generation of compound statement ('{}')\nclang: error: unable to execute command: Illegal instruction\nclang: error: clang frontend command failed due to signal 2 (use -v to see invocation)",
        "comment" : "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ncloned to <rdar://problem/9756266>\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFixed in r134966, please verify though because your testcase doesn't build for me.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n(In reply to comment #2)\n> Fixed in r134966, please verify though because your testcase doesn't build for\n> me.\n\nWorks now. Thanks."
    }
]